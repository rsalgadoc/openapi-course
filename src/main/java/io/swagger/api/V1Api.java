/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.71).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Beer;
import io.swagger.model.BeerOrder;
import io.swagger.model.BeerPagedList;
import io.swagger.model.Customer;
import io.swagger.model.CustomerPagedList;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-07-10T20:45:34.867553213Z[GMT]")
@Validated
public interface V1Api {

    @Operation(summary = "Delete Beer by Id", description = "Delete a beer resource by its ID value.", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Beer Resource Deleted"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/v1/beers/{beerId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteBeerV1(@Parameter(in = ParameterIn.PATH, description = "Beer Id", required=true, schema=@Schema()) @PathVariable("beerId") UUID beerId
);


    @Operation(summary = "Delete Customer By ID", description = "Delete a customer by its Id value.", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Customer Delete"),
        
        @ApiResponse(responseCode = "404", description = "Not found") })
    @RequestMapping(value = "/v1/customers/{customerId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCustomerV1(@Parameter(in = ParameterIn.PATH, description = "Customer Id", required=true, schema=@Schema()) @PathVariable("customerId") UUID customerId
);


    @Operation(summary = "Get Beer by ID", description = "Get a single beer by its ID value.", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Found Beer by Id", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Beer.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/v1/beers/{beerId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Beer> getBeerByIdV1(@Parameter(in = ParameterIn.PATH, description = "Beer Id", required=true, schema=@Schema()) @PathVariable("beerId") UUID beerId
);


    @Operation(summary = "Get Customer By ID", description = "Get a single **Customer** by its Id value.", tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Found Customer", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))),
        
        @ApiResponse(responseCode = "404", description = "Not found") })
    @RequestMapping(value = "/v1/customers/{customerId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Customer> getCustomerByIdV1(@Parameter(in = ParameterIn.PATH, description = "Customer Id", required=true, schema=@Schema()) @PathVariable("customerId") UUID customerId
);


    @Operation(summary = "List Beers", description = "List all beers in system.", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of Beers", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BeerPagedList.class))),
        
        @ApiResponse(responseCode = "404", description = "No Beers Found") })
    @RequestMapping(value = "/v1/beers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<BeerPagedList> listBeersV1(@Parameter(in = ParameterIn.QUERY, description = "Page Number" ,schema=@Schema( defaultValue="1")) @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber
, @Parameter(in = ParameterIn.QUERY, description = "Page Size" ,schema=@Schema( defaultValue="25")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue="25") Integer pageSize
);


    @Operation(summary = "List Customers", description = "Get a list of customers in the system", tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "List of Customers", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerPagedList.class))) })
    @RequestMapping(value = "/v1/customers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CustomerPagedList> listCustomersV1(@Parameter(in = ParameterIn.QUERY, description = "Page Number" ,schema=@Schema( defaultValue="1")) @Valid @RequestParam(value = "pageNumber", required = false, defaultValue="1") Integer pageNumber
, @Parameter(in = ParameterIn.QUERY, description = "Page Size" ,schema=@Schema( defaultValue="25")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue="25") Integer pageSize
);


    @Operation(summary = "Update Beer by ID", description = "Update a beer by its ID value.", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Beer Updated"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "404", description = "Not Found"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/beers/{beerId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateBeerByIdV1(@Parameter(in = ParameterIn.PATH, description = "Beer Id", required=true, schema=@Schema()) @PathVariable("beerId") UUID beerId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Beer body
);


    @Operation(summary = "New Beer", description = "Create a new Beer Object", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Beers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Beer Created"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/beers",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> v1BeersPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Beer body
);


    @Operation(summary = "", description = "Place Order", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Order Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Order Created"),
        
        @ApiResponse(responseCode = "400", description = "Bad Reqeust"),
        
        @ApiResponse(responseCode = "404", description = "Not Found"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/customers/{customerId}/orders",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> v1CustomersCustomerIdOrdersPost(@Parameter(in = ParameterIn.PATH, description = "Customer Id", required=true, schema=@Schema()) @PathVariable("customerId") UUID customerId
, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody BeerOrder body
);


    @Operation(summary = "Update Customer", description = "Update customer by id.", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Customer Updated"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/customers/{customerId}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> v1CustomersCustomerIdPut(@Parameter(in = ParameterIn.PATH, description = "Customer Id", required=true, schema=@Schema()) @PathVariable("customerId") UUID customerId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Customer body
);


    @Operation(summary = "New Customer", description = "Create a new customer", security = {
        @SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "JwtAuthToken")    }, tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Customer Created"),
        
        @ApiResponse(responseCode = "400", description = "Bad Request"),
        
        @ApiResponse(responseCode = "409", description = "Conflict") })
    @RequestMapping(value = "/v1/customers",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> v1CustomersPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Customer body
);

}

